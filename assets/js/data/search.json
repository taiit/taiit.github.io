[ { "title": "Upgrade Cronos CNC Controller Board Firmware", "url": "/posts/upgrade-cronos-cnc-controller-board-firmware/", "categories": "", "tags": "", "date": "2022-09-17 19:24:00 +0700", "snippet": "" }, { "title": "linux cnc", "url": "/posts/LinuxCNC/", "categories": "Blogging, Tutorial", "tags": "linux, raspberry pi", "date": "2022-09-03 18:10:00 +0700", "snippet": "Run HAL (Hardware Abstraction Layer)halcmd: loadrt hal_pi_gpiohalcmd: show pininstall rpi_gpio mask toolwget https://github.com/jethornton/rpi_gpio/blob/master/rpi-gpio_1.0_amd64.deb" }, { "title": "BuildRoot raspberry pi 4 realtime kernel", "url": "/posts/BuildRoot-raspberry-pi-realtime-kernel/", "categories": "Blogging, Tutorial", "tags": "linux, raspberry pi", "date": "2022-09-03 18:10:00 +0700", "snippet": "Get builroothttps://buildroot.org/download.htmleg: https://git.buildroot.net/buildroot/tag/?h=2022.02.5$ cd ~/work$ git clone -b 2022.02.5 --single-branch https://git.busybox.net/buildroot buildroot_for_rpi4" }, { "title": "Build raspberry pi realtime kernel", "url": "/posts/Build-raspberry-pi-realtime-kernel/", "categories": "Blogging, Tutorial", "tags": "linux, raspberry pi", "date": "2022-09-03 17:00:00 +0700", "snippet": "Common application$ sudo apt-get update $ sudo apt-get install vim gedit tmux powerline \\ tzdata apt-utils lsb-release software-properties-common openssh-client \\ wget curl gzip git time meld net-tools openssh-server$ sudo apt install tightvncserverBuild raspberry pi realtime kernelexport UNAME_R=5.15.0-1013-raspiexport RT_PATCHexport KERNEL_VERSION=5.15.0export UBUNTU_VERSION=jammyexport LTTNG_VERSION=2.13export KERNEL_DIR=linux-raspiexport ARCH=arm64export triple=aarch64-linux-gnusudo dpkg --add-architecture ${ARCH}# setup archsudo apt-get updatesudo apt-get install -q -y gcc-${triple}sudo dpkg --add-architecture ${ARCH}sudo sed -i 's/deb h/deb [arch=amd64] h/g' /etc/apt/sources.listsudo add-apt-repository -n -s \"deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -s -c) main universe restricted\"sudo add-apt-repository -n -s \"deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -s -c)-updates main universe restricted\"# sudo rm -rf /var/lib/apt/lists/* sudo apt-get updatesudo apt-get build-dep -q -y linuxinstall build deps$ sudo apt-get install libncurses-dev flex bison openssl libssl-dev dkms \\ libelf-dev libudev-dev libpci-dev libiberty-dev autoconf fakerootif test -z $UNAME_R; then curl -s http://ports.ubuntu.com/pool/main/l/linux-raspi/ | grep linux-buildinfo | grep -o -P '(?&lt;=&lt;a href=\").*(?=\"&gt;l)' | grep ${ARCH} | grep ${KERNEL_VERSION} | sort | tail -n 1 | cut -d '-' -f 3-4 UNAME_R=`curl -s http://ports.ubuntu.com/pool/main/l/linux-raspi/ | grep linux-buildinfo | grep -o -P '(?&lt;=&lt;a href=\").*(?=\"&gt;l)' | grep ${ARCH} | grep ${KERNEL_VERSION} | sort | tail -n 1 | cut -d '-' -f 3-4`-raspifimkdir -~/work/rpi${KERNEL_DIR}cd ~/work/rpi/git clone -b master --single-branch https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux-raspi/+git/${UBUNTU_VERSION} ${KERNEL_DIR}cd ~/work/rpi/${KERNEL_DIR}# checkout necessary taggit fetch --tagecho $UNAME_R &gt; ~/work/rpi/uname_r.txtgit tag -l *`cat ~/work/rpi/uname_r.txt | cut -d '-' -f 2`* | sort -V | tail -1 &gt; ~/work/rpi/tag.txtgit checkout `cat ~/work/rpi/tag.txt`# install buildinfo to retieve `raspi` kernel configcd ~/work/rpiwget http://ports.ubuntu.com/pool/main/l/linux-raspi/linux-buildinfo-${KERNEL_VERSION}-`cat ~/work/rpi/uname_r.txt | cut -d '-' -f 2`-raspi_${KERNEL_VERSION}-`cat ~/work/rpi/tag.txt | cut -d '-' -f 4`_${ARCH}.debdpkg -X *.deb ~/work/rpi# install lttng dependencies# echo \"deb http://cz.archive.ubuntu.com/ubuntu impish main\" | sudo tee /etc/apt/sources.list.d/impish_main.listsudo apt-get updatesudo apt-get install -y libuuid1 libpopt0 liburcu-dev libxml2 numactlcd ~/work/rpi/${KERNEL_DIR}/home/taihv/work/rpi/get_rt_patch.sh `make kernelversion` &gt; ../rt_patch.txtcd ~/work/rpi/wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/`echo ${KERNEL_VERSION} | cut -d '.' -f 1-2`/older/patch-`cat ~/work/rpi/rt_patch.txt`.patch.gzgunzip patch-`cat ~/work/rpi/rt_patch.txt`.patch.gzsudo apt-add-repository -s -y ppa:lttng/stable-${LTTNG_VERSION}sudo apt-get updateapt-get source lttng-modules-dkms# patch kernel, do not fail if some patches are skippedcd ~/work/rpi/${KERNEL_DIR}patch -p1 --forward &lt; ~/work/rpi/patch-`cat ~/work/rpi/rt_patch.txt`.patch# setup build environmentcd ~/work/rpi/${KERNEL_DIR}export $(dpkg-architecture -a${ARCH})export CROSS_COMPILE=${triple}-# no need to run fakeroot debian/rules clean# no need to run LANG=C fakeroot debian/rules printenvcp /home/taihv/work/rpi/usr/lib/linux/`cat ~/work/rpi/uname_r.txt`/config .config # make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfigmake menuconfigmake LOCALVERSION=-raspi -j `nproc` bindeb-pkgmake LOCALVERSION=-raspi -j20 bindeb-pkgscp *.deb taihv@192.168.79.27:~/worksudo dpkg -i linux-image-*.debsudo apt updatesudo apt upgradeCOPY ./.config-fragment /home/user/linux_build/.# config RT kernel and merge config fragment./scripts/kconfig/merge_config.sh .config ../.config-fragmentcd ~/work/rpi/${KERNEL_DIR} &amp;&amp; fakeroot debian/rules cleanVersion 3make bcm2711_defconfig./scripts/config --disable CONFIG_VIRTUALIZATIONRUN ./scripts/config --enable CONFIG_PREEMPT_RTRUN ./scripts/config --disable CONFIG_RCU_EXPERTRUN ./scripts/config --enable CONFIG_RCU_BOOSTRUN ./scripts/config --set-val CONFIG_RCU_BOOST_DELAY 500CONFIG_HIGH_RES_TIMERS=yCONFIG_NO_HZ\t=\ty\t\t\t\t #\twhen\tidle,\tEckles\tto\tsave\tenergy\tCONFIG_HZ\t=\t100 #\tEck\tevery\t10\tmsVersion 4" }, { "title": "Raspberry Pi4 Boot Note", "url": "/posts/Raspberry-pi4-boot-note/", "categories": "", "tags": "", "date": "2021-02-02 00:00:00 +0700", "snippet": "title: BuildRoot raspberry pi 4 boot noteauthor: taiitdate: 2021-02-02 10:00:00 +0700categories: [Blogging, Tutorial]tags: [linux, raspberry pi]pin: true—Add new to config.txtenable_uart=1# disable bluetooth module and map pl011 UART on pins 14 and 15dtoverlay=disable-btand cmdline.txtconsole=serial0,115200get running kernel configcat /boot/config-$(uname -r)installed tool$ sudo apt install git vim gedit \\ net-tools openssh-server raspi-configsudo apt -y install tigervnc-standalone-servervncpasswdtigervncserver -xstartup /usr/bin/gnome-session -geometry 1920x1080 -localhost notigervncserver -kill :1On Ubuntu, instead of the gpio group, add your user to the dialout group to give yourself access to the GPIO pins.sudo apt install rpi.gpio-commonsudo adduser “${USER}” dialoutsudo reboot" } ]
